openapi: "3.0.2"
info:
  title: API Title
  version: "1.0"
servers:
  - url: http://127.0.0.1:8000/
paths:
  /api/events/:
    get:
      tags:
        - events
      description: "get news list"
      parameters:
        - name: page
          in: query
          description: page
          required: false
          schema:
            type: number
            default: 1
        - name: search
          in: query
          description: search text
          required: false
          schema:
            type: string
            default: ""
            example: "title"
          style: deepObject
          explode: true
        # - name: limit
        #   in: query
        #   required: false
        #   schema:
        #     type: number
        #     default: 20
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 4
                    description: "Кол-во обьектов"
                  next:
                    type: string
                    example: "http://127.0.0.1:8000/api/events/?page=3"
                  previous:
                    type: string
                    example: "http://127.0.0.1:8000/api/events/?page=1"
                  results:
                    $ref: "#/components/schemas/Events"

  /api/event/<id>:
    get:
      tags:
        - events
      description: "get event by id"
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          schema:
            type: number
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventItemFull"

  /users/registration/:
    post:
      tags:
        - auth
      description: "registration"
      parameters:
        - name: email
          in: query
          description: username(email)
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: password
          required: true
          schema:
            type: string
        - name: first_name
          in: query
          description: first_name
          required: true
          schema:
            type: string
        - name: last_name
          in: query
          description: last_name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "500":
          description: internal server error

  /api/token/:
    post:
      tags:
        - tokens
      description: "authorization"
      parameters:
        - name: username
          in: query
          description: username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: password
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  refresh:
                    type: string
                    example: "token"
                  access:
                    type: string
                    example: "token"
        "401":
          description: No active account found with the given credentials

  /api/token/refresh/:
    post:
      tags:
        - tokens
      description: "refresh token"
      parameters:
        - name: token
          in: query
          description: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  refresh:
                    type: string
                    example: "token"
                  access:
                    type: string
                    example: "token"
        "401":
          description: Token is invalid or expired

  /api/counts/:
    get:
      tags:
        - events
      description: "get users and events count"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  events_count:
                    type: number
                    example: 228
                  users_count:
                    type: number
                    example: 228
  /api/profile/:
    get:
      tags:
        - auth
      description: "get my profile"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User"
        "404":
          description: user not found

  /api/profile/update/:
    put:
      tags:
        - auth
      description: "update profile"
      parameters:
        - name: token
          in: query
          description: token
          required: true
          schema:
            type: string
        - name: first_name
          in: query
          description: first_name
          required: false
          schema:
            type: string
        - name: last_name
          in: query
          description: last_name
          required: false
          schema:
            type: string
        - name: bio
          in: query
          description: bio
          required: false
          schema:
            type: string
        - name: birthdate
          in: query
          description: birthdate
          required: false
          schema:
            type: string
        - name: phone
          in: query
          description: phone
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: email
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
        "404":
          description: User not authorized

  /api/users/<id>:
    get:
      tags:
        - auth
      description: "get user's profile by id"
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          schema:
            type: number
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User"

  /api/event/create/:
    put:
      tags:
        - events
      description: "get user's profile by id"
      parameters:
        - name: title
          in: query
          description: title
          required: true
          schema:
            type: number
        - name: text
          in: query
          description: text
          required: true
          schema:
            type: number
        - name: city
          in: query
          description: city
          required: true
          schema:
            type: number
        - name: street
          in: query
          description: street
          required: true
          schema:
            type: number
        - name: house
          in: query
          description: house
          required: true
          schema:
            type: number
        - name: coords
          in: query
          description: coords
          required: true
          schema:
            type: number
        - name: event_time_start
          in: query
          description: event_time_start
          required: true
          schema:
            type: number
        - name: event_time_end
          in: query
          description: event_time_end
          required: true
          schema:
            type: number
        - name: reg_time_end
          in: query
          description: reg_time_end
          required: true
          schema:
            type: number
        - name: tag
          in: query
          description: tag
          required: true
          schema:
            type: number
        - name: price
          in: query
          description: price
          required: true
          schema:
            type: number
      responses:
        "200":
          description: successful operation

  /api/event/<id>/update/:
    post:
      tags:
        - events
      description: "get user's profile by id"
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: number
        - name: title
          in: query
          description: title
          required: false
          schema:
            type: number
        - name: text
          in: query
          description: text
          required: false
          schema:
            type: number
        - name: event_time_start
          in: query
          description: event_time_start
          required: false
          schema:
            type: number
        - name: event_time_end
          in: query
          description: event_time_end
          required: false
          schema:
            type: number
        - name: reg_time_end
          in: query
          description: reg_time_end
          required: false
          schema:
            type: number
        - name: price
          in: query
          description: price
          required: false
          schema:
            type: number
      responses:
        "200":
          description: successful operation
        "400":
          description: error

components:
  schemas:
    Events:
      type: array
      items:
        $ref: "#/components/schemas/EventItem"

    EventItem:
      type: object
      properties:
        id:
          type: number
          example: 123
        title:
          type: string
          example: "name of event"
        participant_count:
          type: number
          example: 123
        city:
          type: string
          example: "Tula"
        event_time_start:
          type: string
          example: "2023-10-26 18:25"
        event_time_end:
          type: string
          example: "2023-10-26 18:25"
        preview:
          type: object
          $ref: "#/components/schemas/Preview"
        price:
          type: number
          example: 100

    EventItemFull:
      type: object
      properties:
        id:
          type: number
          example: 123
        title:
          type: string
          example: "name of event"
        text:
          type: string
          example: "bio of event"
        preview:
          type: object
          $ref: "#/components/schemas/Preview"
        manager:
          type: object
          $ref: "#/components/schemas/Manager"
        city:
          type: string
          example: "Tula"
        street:
          type: string
          example: "Komsomola"
        house:
          type: string
          example: "3"
        coords:
          type: string
          example: "3.4243243242, 5.4324234143"
        event_time_start:
          type: string
          example: "2023-10-26 18:25"
        event_time_end:
          type: string
          example: "2023-10-26 18:25"
        reg_time_end:
          type: string
          example: "2023-10-26 18:25"
        time_until_reg_end:
          type: number
          example: 1
        participant_count:
          type: number
          example: 123
        tags:
          type: array
          $ref: "#/components/schemas/Tag"
        price:
          type: number
          example: 100

    Manager:
      type: object
      properties:
        id:
          type: number
          example: 123
        first_name:
          type: string
          example: "Elena"
        last_name:
          type: string
          example: "Arefeva"
        mail:
          type: string
          example: "Elena@mail.com"
        avatar:
          type: string
          example: "http://127.0.0.1:8000/media/events_preview/KRvpx_QTcCg.jpg"
        phone:
          type: string
          example: "+79235553424"

    Tag:
      type: object
      properties:
        id:
          type: number
          example: 123
        title:
          type: string
          example: "name of event"

    Preview:
      type: object
      properties:
        src:
          type: string
          example: "/media/events_preview/KRvpx_QTcCg.jpg"

    MiniEvent:
      type: object
      properties:
        id:
          type: number
          example: 123
        title:
          type: string
          example: "Event title"
        preview:
          type: object
          $ref: "#/components/schemas/Preview"
        date:
          type: string
          example: "2023-10-26 18:25"
        city:
          type: string
          example: "Tula"

    User:
      type: object
      properties:
        id:
          type: number
          example: 123
        first_name:
          type: string
          example: "Denis"
        last_name:
          type: string
          example: "Davidov"
        avatar:
          type: string
          example: "/media/users_photos/00kmxC_llvs.jpg"
        bio:
          type: string
          example: "bio"
        birthdate:
          type: string
          example: "2023-10-02"
        phone:
          type: string
          example: "89156958420"
        email:
          type: string
          example: "denis.71@mail.ru"
        events:
          type: array
          $ref: "#/components/schemas/MiniEvent"
